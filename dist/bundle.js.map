{"version":3,"file":"bundle.js","mappings":"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AAI,wEAAoB;AACxB,IAAI,sEAAmB;AACvB,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI,oDAAS;AACb;AACA;;;;;;;;;;;;;;;ACxFA;;AAEO;AACP;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA,0BAA0B,MAAM;AAChC,0BAA0B,KAAK;AAC/B;AACA,qDAAqD,KAAK;AAC1D;AACA;AACA,0BAA0B,MAAM;AAChC;AACA,GAAG;AACH;;;;;;;;;;;;;;;;;;AC5C+C;AACM;;AAErD;AACO;;AAEA;AACP;AACA;AACA,IAAI,2DAAU;AACd,GAAG;;AAEH;AACA,IAAI,kEAAc;AAClB,GAAG;AACH;;;;;;;;;;;;;;;ACfA;;AAEA;;AAEO;AACP;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;ACjB8C;AACJ;AAC3C;;AAEA;AACA;AACA,mBAAmB,oDAAS;AAC5B;AACA,CAAC;;AAED;AACO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAM,oDAAS;AACf;AACA,MAAM,2DAAU;AAChB,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;;;;;;;;;;;;;;;AC9BO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;;;;;;;;;;;;;;ACvDO;AACP;AACA;AACA;;AAEA,YAAY,MAAM,GAAG,uCAAuC;AAC5D;;;;;;;;;;;;;;;;ACNO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;AC7BO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACTmD;;AAEnD;;AAEA;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI,+DAAS;AACb,IAAI;AACJ,IAAI,+DAAS;AACb;AACA,CAAC;;;;;;;;;;;;;;;ACjBD;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;ACfO;AACP;;AAEA;AACA;;AAEA,iCAAiC,cAAc;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH,YAAY,KAAK,IAAI,KAAK;AAC1B;;AAEA;;;;;;;;;;;;;;;ACxBO;AACP;;AAEA;AACA;AACA;;AAEA,YAAY,MAAM,GAAG,uCAAuC;AAC5D;;;;;;;;;;;;;;;ACRO;AACP;;AAEA,6BAA6B,SAAS;AACtC;AACA;;;;;;;;;;;;;;;;ACL6C;;AAEtC;AACP,0BAA0B,0DAAU;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACbO;AACP;AACA;;AAEA;AACA,uCAAuC,aAAa;;AAEpD;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACZ0D;AACZ;AACe;AACA;AACH;AACA;AACG;;AAEtD;AACP,EAAE,uEAAW;AACb,EAAE,2DAAU;AACZ,EAAE,0EAAgB;AAClB,EAAE,0EAAiB;AACnB,EAAE,uEAAW;AACb,EAAE,uEAAW;AACb,EAAE,0EAAc;AAChB;;;;;;;;;;;;AChBA;;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D,E;;;;;;;;;;;;;ACN2B;AACS;;AAEpC,iDAAO;;AAEP;AACA,kBAAkB;AAClB;AACA;;AAEA","sources":["webpack://proj-8.1-weather-app/./src/api/apiKeyAndHost.js","webpack://proj-8.1-weather-app/./src/api/geoData.js","webpack://proj-8.1-weather-app/./src/api/getWeatherAndForecast.js","webpack://proj-8.1-weather-app/./src/components/currentWeather.js","webpack://proj-8.1-weather-app/./src/components/currentYear.js","webpack://proj-8.1-weather-app/./src/components/dailyForecast.js","webpack://proj-8.1-weather-app/./src/components/error.js","webpack://proj-8.1-weather-app/./src/components/geolocation.js","webpack://proj-8.1-weather-app/./src/components/hourlyForecast.js","webpack://proj-8.1-weather-app/./src/components/inputForm.js","webpack://proj-8.1-weather-app/./src/components/scrollToTop.js","webpack://proj-8.1-weather-app/./src/components/showLastCities.js","webpack://proj-8.1-weather-app/./src/components/switchTheme.js","webpack://proj-8.1-weather-app/./src/helpers/calcDayLength.js","webpack://proj-8.1-weather-app/./src/helpers/calcSunPosition.js","webpack://proj-8.1-weather-app/./src/helpers/capitalize.js","webpack://proj-8.1-weather-app/./src/helpers/checkCyrillic.js","webpack://proj-8.1-weather-app/./src/helpers/cityCorrect.js","webpack://proj-8.1-weather-app/./src/helpers/currentTime.js","webpack://proj-8.1-weather-app/./src/helpers/formatTime.js","webpack://proj-8.1-weather-app/./src/helpers/humidityIndicator.js","webpack://proj-8.1-weather-app/./src/helpers/saveCityToLocalStorage.js","webpack://proj-8.1-weather-app/./src/helpers/windDirectionIndicator.js","webpack://proj-8.1-weather-app/./src/init.js","webpack://proj-8.1-weather-app/./src/styles/main.css?5846","webpack://proj-8.1-weather-app/webpack/bootstrap","webpack://proj-8.1-weather-app/webpack/runtime/define property getters","webpack://proj-8.1-weather-app/webpack/runtime/hasOwnProperty shorthand","webpack://proj-8.1-weather-app/webpack/runtime/make namespace object","webpack://proj-8.1-weather-app/./src/main.js"],"sourcesContent":["export const apiKey = \"fedb6c450be4c2411a3c8e5d42cf418d\";\nexport const baseUrl = \"https://api.openweathermap.org\";\n","import { apiKey, baseUrl } from \"./apiKeyAndHost.js\";\nimport { cityInput } from \"../components/inputForm.js\";\nimport { showError } from \"../components/error.js\";\nimport { isCyrillic } from \"../helpers/checkCyrillic.js\";\nimport { cityCorrect } from \"../helpers/cityCorrect.js\";\nimport { saveCityToLocalStorage } from \"../helpers/saveCityToLocalStorage.js\";\nimport { getWeather, getForecast } from \"./getWeatherAndForecast.js\";\nimport { renderCurrentWeather } from \"../components/currentWeather.js\";\nimport { renderHourlyForecast } from \"../components/hourlyForecast.js\";\nimport { renderDaylyForecast } from \"../components/dailyForecast.js\";\n\n//\nexport async function getGeoData() {\n  let city = cityInput.value.trim().toLowerCase();\n\n  if (!city) {\n    return;\n  }\n  if (!isCyrillic(city)) {\n    showError(\"Введите город\");\n    return;\n  }\n\n  city = cityCorrect(city);\n\n  try {\n    const geoUrl = `${baseUrl}/geo/1.0/direct`;\n    const queryParams = new URLSearchParams({\n      q: city,\n      limit: 1,\n      appid: apiKey,\n    });\n\n    const geoResponse = await fetch(`${geoUrl}?${queryParams.toString()}`);\n    const geoData = await geoResponse.json();\n    if (!geoData.length) {\n      throw new Error(\"Город не найден!\");\n    }\n\n    const { lat, lon } = geoData[0];\n\n    saveCityToLocalStorage(city);\n\n    const weatherData = await getWeather(lat, lon);\n    const forecastData = await getForecast(lat, lon);\n\n    renderCurrentWeather(weatherData, city);\n    renderHourlyForecast(forecastData);\n    renderDaylyForecast(forecastData);\n  } catch (error) {\n    console.error(error.message);\n    showError(\"Город не найден!\");\n  }\n}\n","import { apiKey, baseUrl } from \"./apiKeyAndHost.js\";\n\n//\nexport async function getWeather(lat, lon) {\n  return fetchData(\"weather\", lat, lon);\n}\n\nexport async function getForecast(lat, lon) {\n  return fetchData(\"forecast\", lat, lon);\n}\n\nasync function fetchData(endpoint, lat, lon) {\n  const url = new URL(`${baseUrl}/data/2.5/${endpoint}`);\n  const queryParams = new URLSearchParams({\n    lat: lat,\n    lon: lon,\n    appid: apiKey,\n    lang: \"ru\",\n    units: \"metric\",\n  });\n\n  url.search = queryParams.toString();\n  //   console.log(\"--->\", url.search);\n\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(\"Не удалось загрузить данные о погоде\");\n    }\n\n    // console.log(response);\n    return response.json();\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n","import { windDirection } from \"../helpers/windDirectionIndicator.js\";\nimport { humidityIndicator } from \"../helpers/humidityIndicator.js\";\nimport { formatTime } from \"../helpers/formatTime.js\";\nimport { calcDayLenght } from \"../helpers/calcDayLength.js\";\nimport {\n  calcSunPosition,\n  updateSunPosition,\n} from \"../helpers/calcSunPosition.js\";\n\n//\nconst currentCity = document.querySelector(\".city\");\nconst currentTemperature = document.querySelector(\".temperature\");\nconst currenteFeelsLike = document.querySelector(\".feels\");\nconst currenteDescription = document.querySelector(\".description\");\nconst currentWeatherIcon = document.querySelector(\".weather-icon img\");\n\nconst currentWind = document.querySelector(\".wind\");\nconst currentVisibility = document.querySelector(\".visibility\");\nconst currentHumidity = document.querySelector(\".humidity\");\nconst currentPressure = document.querySelector(\".pressure\");\n\nconst dayLenght = document.querySelector(\".day-length\");\nconst sunriseItem = document.querySelector(\".sunrise\");\nconst sunsetItem = document.querySelector(\".sunset\");\n\n//\nexport function renderCurrentWeather(data, city) {\n  // console.log(\"weatherData --->\", data);\n\n  //\n  currentCity.textContent = city || \"неизвестно\";\n  currentTemperature.textContent = `${Math.round(data.main?.temp || \"?\")}°C`;\n  currenteFeelsLike.textContent = `Ощущается как ${Math.round(\n    data.main?.feels_like || \"?\",\n  )}°C`;\n  currenteDescription.textContent =\n    data.weather?.[0]?.description || \"неизвестно\";\n  currentWeatherIcon.src = `https://openweathermap.org/img/wn/${data.weather?.[0]?.icon}@2x.png`;\n\n  //\n  currentWind.textContent = `${Math.round(data.wind?.speed || 0)} м/с`;\n  const currentWindDeg = data.wind?.deg || 0;\n  windDirection(currentWindDeg);\n  const visibility = data.visibility || 0;\n  if (visibility >= 1000) {\n    currentVisibility.textContent = `${visibility / 1000} км`;\n  } else {\n    currentVisibility.textContent = `${visibility} м`;\n  }\n  currentHumidity.textContent = `${data.main?.humidity || 0}%`;\n  const humidity = data.main?.humidity;\n  humidityIndicator(humidity);\n\n  currentPressure.textContent = `${Math.round(\n    (data.main?.pressure || 0) * 0.750062,\n  )}мм`;\n  currentPressure.textContent = `${Math.round(\n    (data.main?.pressure || 0) * 0.750062,\n  )}мм`;\n\n  //\n  const { sunrise, sunset } = data.sys || {};\n  const { timezone } = data || {};\n  sunriseItem.textContent = sunrise ? formatTime(sunrise, timezone) : \"н/д\";\n  sunsetItem.textContent = sunset ? formatTime(sunset, timezone) : \"н/д\";\n\n  dayLenght.textContent = `Длинна светового дня: ${\n    sunrise && sunset ? calcDayLenght(sunrise, sunset) : \"н/д\"\n  }`;\n\n  const sunPosition = sunrise && sunset ? calcSunPosition(sunrise, sunset) : 0;\n  updateSunPosition(sunPosition);\n}\n","export function getCurrentYear() {\n  const currentYear = new Date().getFullYear();\n\n  const yearEl = document.getElementById(\"currentYear\");\n  yearEl.textContent = currentYear;\n}\n","const forecastListEl = document.querySelector(\".forecast-list\");\n\n//\nexport function renderDaylyForecast(data) {\n  forecastListEl.innerHTML = \"\";\n\n  const groupedData = groupDataByDay(data.list);\n\n  Object.keys(groupedData)\n    .slice(0, 5)\n    .forEach((dayKey) => {\n      const dayData = groupedData[dayKey];\n\n      const maxTemp = Math.round(\n        Math.max(...dayData.map((item) => item.main.temp_max)),\n      );\n\n      const minTemp = Math.round(\n        Math.min(...dayData.map((item) => item.main.temp_min)),\n      );\n\n      const icon = dayData[0].weather[0].icon;\n      const date = new Date(dayData[0].dt * 1000);\n      const dayName = date.toLocaleDateString(\"ru-RU\", {\n        weekday: \"short\",\n      });\n      const dayNumber = date.getDate();\n      const monthName = date.toLocaleDateString(\"ru-RU\", {\n        month: \"short\",\n      });\n\n      const forecastItemEl = document.createElement(\"div\");\n      forecastItemEl.classList.add(\"forecast-item\");\n      forecastItemEl.innerHTML = `\n          <p class=\"day\">${dayName},</p>\n          <p class=\"day\">${dayNumber} ${monthName}</p>\n          <img\n              src=\"https://openweathermap.org/img/wn/${icon}@2x.png\"\n              alt=\"Погода\"\n          />\n          <div class=\"temp\">\n              <p class=\"temp-day\">${maxTemp} °C</p>\n              <p class=\"temp-night\">${minTemp} °C</p>\n          </div>`;\n\n      forecastListEl.append(forecastItemEl);\n    });\n}\n\n//\nfunction groupDataByDay(list) {\n  const groupedData = {};\n\n  list.forEach((item) => {\n    const date = new Date(item.dt * 1000);\n    const dayKey = date.toLocaleDateString(\"ru-RU\");\n\n    if (!groupedData[dayKey]) {\n      groupedData[dayKey] = [];\n    }\n    groupedData[dayKey].push(item);\n  });\n\n  return groupedData;\n}\n","const errorMessage = document.getElementById(\"error-message\");\n\nexport function showError(message) {\n  errorMessage.textContent = message;\n}\n","import { apiKey, baseUrl } from \"../api/apiKeyAndHost.js\";\nimport { getWeather, getForecast } from \"../api/getWeatherAndForecast.js\";\nimport { showError } from \"./error.js\";\nimport { renderCurrentWeather } from \"./currentWeather.js\";\nimport { renderHourlyForecast } from \"./hourlyForecast.js\";\nimport { renderDaylyForecast } from \"./dailyForecast.js\";\n\n//\nexport function geoLocation() {\n  document.addEventListener(\"DOMContentLoaded\", async () => {\n    try {\n      const { latitude, longitude } = await getBrowserGeoLocation();\n      const locationName = await getLocationName(latitude, longitude);\n      await fetchWeatherByCoords(latitude, longitude, locationName);\n    } catch (error) {\n      console.error(\"Ошибка при получении геолокации\", error.message);\n      showError(\"Ошибка при получении геолокации\");\n    }\n  });\n}\n\nfunction getBrowserGeoLocation() {\n  return new Promise((resolve, reject) => {\n    if (!navigator.geolocation) {\n      reject(new Error(\"Геолокация не поддерживается\"));\n    } else {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          resolve({ latitude, longitude });\n        },\n        (error) => {\n          reject(error);\n        },\n      );\n    }\n  });\n}\n\nasync function getLocationName(latitude, longitude) {\n  const reverseGeoCodingUrl = new URL(`${baseUrl}/geo/1.0/reverse`);\n\n  const queryParams = new URLSearchParams({\n    lat: latitude,\n    lon: longitude,\n    limit: 1,\n    appid: apiKey,\n  });\n\n  const url = `${reverseGeoCodingUrl}?${queryParams.toString()}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (data && data.length > 0) {\n      // eslint-disable-next-line camelcase\n      const { local_names } = data[0];\n      // eslint-disable-next-line camelcase\n      const russianName = local_names?.ru || data[0].name;\n      return `${russianName}`;\n    } else {\n      throw new Error(\"Локация не найдена\");\n    }\n  } catch (error) {\n    console.error(\n      \"Ошибка при получении названия локации (getLocationName)\",\n      error.message,\n    );\n    showError(\"Ошибка при получении названия локации\");\n  }\n}\n\nasync function fetchWeatherByCoords(latitude, longitude, locationName) {\n  try {\n    const weatherData = await getWeather(latitude, longitude);\n    const forecastData = await getForecast(latitude, longitude);\n\n    renderCurrentWeather(weatherData, locationName);\n    renderHourlyForecast(forecastData);\n    renderDaylyForecast(forecastData);\n  } catch (error) {\n    console.error(\n      \"Ошибка при получении погоды по координатам (fetchWeatherByCoords)\",\n      error.message,\n    );\n    showError(\"Ошибка при получении погоды по координатам\");\n  }\n}\n","const hourlyForecastBlockEl = document.querySelector(\".hourly-scroll\");\n\nexport function renderHourlyForecast(data) {\n  hourlyForecastBlockEl.innerHTML = \"\";\n\n  const currentDate = new Date();\n  currentDate.setHours(0, 0, 0, 0);\n  const daysOfWeek = [\"вс\", \"пн\", \"вт\", \"ср\", \"чт\", \"пт\", \"сб\"];\n\n  const timeZone = data.city.timezone * 1000;\n\n  data.list.forEach((item) => {\n    const date = new Date(item.dt * 1000 + timeZone);\n    const hour = date.getHours();\n    const temp = Math.round(item.main.temp);\n    const icon = item.weather[0].icon;\n\n    const forecastDate = new Date(date);\n    forecastDate.setHours(0, 0, 0, 0);\n\n    const timeDiff = forecastDate.getTime() - currentDate.getTime();\n    const dayDiff = Math.floor(timeDiff / (1000 * 60 * 60 * 24));\n\n    let dayEl;\n    if (dayDiff === 0) {\n      dayEl = \"сегодня\";\n    } else if (dayDiff === 1) {\n      dayEl = \"завтра\";\n    } else {\n      dayEl = daysOfWeek[forecastDate.getDay()];\n    }\n\n    const hourlyItem = document.createElement(\"div\");\n    hourlyItem.classList.add(\"hourly-item\");\n    hourlyItem.innerHTML = `\n        <p class=\"hour\">${dayEl}</p>\n        <p class=\"hour\">${hour}:00</p>\n        <img\n            src=\"https://openweathermap.org/img/wn/${icon}@2x.png\"\n            alt=\"Погода\"\n        />\n        <p class=\"temp\">${temp} °C</p>`;\n    hourlyForecastBlockEl.append(hourlyItem);\n  });\n}\n","import { getGeoData } from \"../api/geoData.js\";\nimport { showLastCities } from \"./showLastCities.js\";\n\nconst searchForm = document.querySelector(\".search-form\");\nexport const cityInput = document.querySelector(\".city-input\");\n\nexport function getWeatherByForm() {\n  searchForm.addEventListener(\"submit\", async (e) => {\n    e.preventDefault();\n    getGeoData(cityInput);\n  });\n\n  cityInput.addEventListener(\"focus\", () => {\n    showLastCities();\n  });\n}\n","const toTopEl = document.getElementById(\"to-top\");\n\ntoTopEl.addEventListener(\"click\", scrollToTop);\n\nexport function scrollToTop() {\n  window.scrollTo({\n    top: 0,\n    behavior: \"smooth\",\n  });\n}\n\nwindow.addEventListener(\"scroll\", () => {\n  if (window.scrollY > 300) {\n    toTopEl.style.display = \"block\";\n  } else {\n    toTopEl.style.display = \"none\";\n  }\n});\n","import { getGeoData } from \"../api/geoData.js\";\nimport { cityInput } from \"./inputForm.js\";\nconst lastCitiesList = document.getElementById(\"recent-cities-list\");\n\n// сброс выпадающего меню по клику вне\ndocument.addEventListener(\"click\", (e) => {\n  if (e.target !== cityInput && e.target !== lastCitiesList)\n    lastCitiesList.style.display = \"none\";\n});\n\n//\nexport function showLastCities() {\n  const cities = JSON.parse(localStorage.getItem(\"citiesArr\")) || [];\n  if (cities.length === 0) return;\n\n  lastCitiesList.innerHTML = \"\";\n\n  cities.forEach((city) => {\n    const liEl = document.createElement(\"li\");\n    liEl.textContent = city;\n    liEl.addEventListener(\"click\", () => {\n      cityInput.value = city;\n      lastCitiesList.style.display = \"none\";\n      getGeoData(city);\n    });\n\n    lastCitiesList.append(liEl);\n  });\n\n  lastCitiesList.style.display = \"block\";\n}\n","export function switchTheme() {\n  const switchThemeEl = document.getElementById(\"theme-switch\");\n  switchThemeEl.addEventListener(\"change\", toggleTheme);\n  let userHasChosenTheme = false;\n\n  // определение текущей темы и новой темы\n  function toggleTheme() {\n    const currentTheme = document.documentElement.getAttribute(\"data-theme\");\n    const newTheme = currentTheme === \"dark\" ? \"light\" : \"dark\";\n\n    userHasChosenTheme = true;\n    setTheme(newTheme);\n  }\n\n  // установка новой темы\n  function setTheme(theme) {\n    document.documentElement.setAttribute(\"data-theme\", theme);\n    if (userHasChosenTheme) {\n      localStorage.setItem(\"theme\", theme);\n    }\n  }\n\n  // установка сохраненной темы из local storage\n  // или тема браузера\n  // или по времени суток (getThemeByTime)\n  const savedTheme = localStorage.getItem(\"theme\");\n  if (savedTheme) {\n    setTheme(savedTheme);\n  } else {\n    const browserTheme = getBrowserTheme();\n    if (browserTheme === \"dark\") {\n      setTheme(\"dark\");\n    } else {\n      const themeByTime = getThemeByTime();\n      setTheme(themeByTime);\n    }\n  }\n\n  // установка темы по времени суток\n  function getThemeByTime() {\n    const now = new Date().getHours();\n    return now >= 7 && now <= 21 ? \"light\" : \"dark\";\n  }\n\n  // установки ос пользователя\n  function getBrowserTheme() {\n    if (\n      window.matchMedia &&\n      window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n    ) {\n      return \"dark\";\n    } else {\n      return \"light\";\n    }\n  }\n}\n","export function calcDayLenght(sunrise, sunset) {\n  const diffSeconds = sunset - sunrise;\n  const hours = Math.floor(diffSeconds / 3600);\n  const minutes = Math.floor((diffSeconds % 3600) / 60);\n\n  return `${hours}:${minutes < 10 ? \"0\" + minutes : minutes}`;\n}\n","export function calcSunPosition(sunrise, sunset) {\n  const now = Math.floor(Date.now() / 1000);\n  const dayLength = sunset - sunrise;\n  const elapsedTime = now - sunrise;\n\n  const percent = elapsedTime / dayLength;\n  return percent;\n}\n\nexport function updateSunPosition(sunPosition) {\n  const sunGraphic = document.querySelector(\".sun-graphic circle\");\n\n  if (sunPosition < 0 || sunPosition > 1) {\n    sunGraphic.setAttribute(\"visibility\", \"hidden\");\n    return;\n  }\n\n  sunGraphic.setAttribute(\"visibility\", \"visible\");\n\n  const startX = 20;\n  const endX = 180;\n  const horizonY = 35;\n  const arcRadius = 45;\n\n  const x = startX + sunPosition * (endX - startX);\n  const y = horizonY - Math.sin(sunPosition * Math.PI) * arcRadius;\n\n  sunGraphic.setAttribute(\"cx\", x);\n  sunGraphic.setAttribute(\"cy\", y);\n}\n","export function capitalize(city) {\n  if (!city) {\n    return city;\n  }\n  return city\n    .toLowerCase()\n    .split(/[\\s-]/)\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(\" \");\n}\n","import { showError } from \"../components/error.js\";\n\nconst cityInput = document.querySelector(\".city-input\");\n\n//\nexport function isCyrillic(text) {\n  const cyrillicRules = /^[А-Яа-яЁё\\s-]+$/;\n  return cyrillicRules.test(text);\n}\n\ncityInput.addEventListener(\"input\", () => {\n  const inputValue = cityInput.value;\n  if (inputValue && !isCyrillic(inputValue)) {\n    showError(\"Введите город на русском языке\");\n  } else {\n    showError(\"\");\n  }\n});\n","const cityAbbreviation = {\n  мск: \"Москва\",\n  спб: \"Санкт-Петербург\",\n  екб: \"Екатеринбург\",\n  нсб: \"Новосибирск\",\n};\n\nexport function cityCorrect(city) {\n  const lowerCaseCity = city.toLowerCase();\n\n  if (cityAbbreviation[lowerCaseCity]) {\n    return cityAbbreviation[lowerCaseCity];\n  }\n\n  return lowerCaseCity;\n}\n","export function renderCurrentTime() {\n  const nowEl = document.querySelector(\".now\");\n\n  const currentTime = new Date();\n  const formattedTime = formatDate(currentTime);\n\n  nowEl.textContent = `Сейчас: ${formattedTime}`;\n}\n\nfunction formatDate(currentTime) {\n  const date = currentTime.toLocaleDateString(\"ru\", {\n    weekday: \"short\",\n    day: \"numeric\",\n    month: \"short\",\n  });\n\n  const time = currentTime.toLocaleTimeString(\"ru\", {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  });\n\n  return `${date}, ${time}`;\n}\n\nsetInterval(renderCurrentTime, 60000);\n","export function formatTime(time, timeZone) {\n  const localTime = time + timeZone;\n\n  const date = new Date(localTime * 1000);\n  const hours = date.getUTCHours();\n  const minutes = date.getUTCMinutes();\n\n  return `${hours}:${minutes < 10 ? \"0\" + minutes : minutes}`;\n}\n","export function humidityIndicator(humidity) {\n  const parameter = document.querySelector(\".parameter\");\n\n  parameter.style.width = `${humidity}%`;\n  parameter.style.backgroundColor = \"white\";\n}\n","import { capitalize } from \"./capitalize.js\";\n\nexport function saveCityToLocalStorage(city) {\n  const capitalizedCity = capitalize(city);\n  let cities = JSON.parse(localStorage.getItem(\"citiesArr\")) || [];\n\n  if (!cities.includes(capitalizedCity)) {\n    cities.unshift(capitalizedCity);\n    if (cities.length > 5) {\n      cities.pop();\n    }\n    localStorage.setItem(\"citiesArr\", JSON.stringify(cities));\n  }\n}\n","export function windDirection(currentWindDeg) {\n  const windIcon = document.getElementById(\"wind-direction-icon\");\n  const windText = document.getElementById(\"wind-direction-text\");\n\n  const iconRotation = (currentWindDeg + 180) % 360;\n  windIcon.style.transform = `rotate(${iconRotation}deg)`;\n\n  const directions = [\"С\", \"СВ\", \"В\", \"ЮВ\", \"Ю\", \"ЮЗ\", \"З\", \"СЗ\"];\n  const normalizedDeg = (currentWindDeg + 360) % 360;\n\n  const index = Math.round(normalizedDeg / 45) % 8;\n  windText.textContent = directions[index] || \"Н/Д\";\n}\n","import { switchTheme } from \"./components/switchTheme.js\";\nimport { getGeoData } from \"./api/geoData.js\";\nimport { getWeatherByForm } from \"./components/inputForm.js\";\nimport { renderCurrentTime } from \"./helpers/currentTime.js\";\nimport { geoLocation } from \"./components/geolocation.js\";\nimport { scrollToTop } from \"./components/scrollToTop.js\";\nimport { getCurrentYear } from \"./components/currentYear.js\";\n\nexport function initApp() {\n  switchTheme();\n  getGeoData();\n  getWeatherByForm();\n  renderCurrentTime();\n  geoLocation();\n  scrollToTop();\n  getCurrentYear();\n}\n","// extracted by mini-css-extract-plugin\nexport {};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import \"./styles/main.css\";\nimport { initApp } from \"./init.js\";\n\ninitApp();\n\nfunction fn1() {\n  const myObj = { key: \"property\" };\n  console.log(myObj.qwe.rty);\n}\n\nfn1();\n"],"names":[],"sourceRoot":""}